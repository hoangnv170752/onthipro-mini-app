import React, { useState, useEffect } from "react";
import { Box, Text, Button, Page, useNavigate, Spinner, Icon, Sheet, Select, Input } from "zmp-ui";
import Logo from "@/components/logo";
import bg from "@/static/bg.svg";
import { getCurrentUser, formatJoinDate, logout } from "@/services/auth";
import { getUserExams, formatExamDate, Exam } from "@/services/exams";
import Clock from "@/components/clock";

function HomePage() {
  const navigate = useNavigate();
  const [userData, setUserData] = useState<{
    name: string;
    joinDate: string;
    registeredExams: number;
    avatarUrl?: string;
  }>({
    name: "",
    joinDate: "",
    registeredExams: 0,
    avatarUrl: ""
  });
  
  const [exams, setExams] = useState<Exam[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  // Tr·∫°ng th√°i cho modal t√¨m ki·∫øm
  const [showSearchModal, setShowSearchModal] = useState(false);
  const [searchFilters, setSearchFilters] = useState({
    subject: "",
    examType: "",
    examName: "",
  });
  
  // D·ªØ li·ªáu m·∫´u cho c√°c b·ªô l·ªçc
  const subjects = ["Ti·∫øng Anh", "To√°n", "V·∫≠t l√Ω", "H√≥a h·ªçc", "Sinh h·ªçc", "Ng·ªØ vƒÉn", "L·ªãch s·ª≠", "ƒê·ªãa l√Ω"];
  const examTypes = ["Ch·ª©ng ch·ªâ", "ƒê·∫°i h·ªçc", "THPT", "√în t·∫≠p"];
  const examNames = {
    "Ti·∫øng Anh": {
      "Ch·ª©ng ch·ªâ": ["IELTS", "TOEIC", "TOEFL"],
      "ƒê·∫°i h·ªçc": ["ƒê·∫°i h·ªçc Ngo·∫°i ng·ªØ", "ƒê·∫°i h·ªçc FPT"],
      "THPT": ["THPT Qu·ªëc gia"],
      "√în t·∫≠p": ["Ng·ªØ ph√°p c∆° b·∫£n", "T·ª´ v·ª±ng n√¢ng cao"]
    },
    "To√°n": {
      "ƒê·∫°i h·ªçc": ["ƒê·∫°i h·ªçc B√°ch Khoa", "ƒê·∫°i h·ªçc T·ª± nhi√™n"],
      "THPT": ["THPT Qu·ªëc gia"],
      "√în t·∫≠p": ["Gi·∫£i t√≠ch", "ƒê·∫°i s·ªë"]
    }
    // C√≥ th·ªÉ th√™m d·ªØ li·ªáu cho c√°c m√¥n h·ªçc kh√°c
  };

  // Get time of day for greeting
  const hour = new Date().getHours();
  let greeting = "";
  if (hour < 12) {
    greeting = "Ch√†o bu·ªïi s√°ng";
  } else if (hour < 18) {
    greeting = "Ch√†o bu·ªïi chi·ªÅu";
  } else {
    greeting = "Ch√†o bu·ªïi t·ªëi";
  }

  // Fetch user data and exams
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        // Get user data from authentication service
        const user = getCurrentUser();
        if (user) {
          // Extract display name from email if available
          const displayName = user.email.split('@')[0];
          
          setUserData({
            name: displayName.charAt(0).toUpperCase() + displayName.slice(1),
            joinDate: formatJoinDate(user.created_at),
            registeredExams: 0, // Will be updated after fetching exams
            avatarUrl: "",
          });
        }

        // Fetch exams
        setIsLoading(true);
        setError("");
        const examData = await getUserExams();
        setExams(examData);
        
        // Update registered exams count
        setUserData(prev => ({
          ...prev,
          registeredExams: examData.length
        }));
      } catch (error) {
        console.error("Error fetching data:", error);
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.");
      } finally {
        setIsLoading(false);
      }
    };

    fetchUserData();
  }, []);
  
  const handleLogout = async () => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?")) {
      try {
        await logout();
        navigate("/login");
      } catch (error) {
        console.error("Logout error:", error);
      }
    }
  };

  return (
    <Page
      className="flex flex-col bg-cover bg-center bg-no-repeat bg-white dark:bg-black min-h-screen"
      style={{
        backgroundImage: `url(${bg})`,
      }}
      hideScrollbar={false}
    >
      {/* User info section - with safe area padding */}
      <Box className="w-full px-4 pt-8 pb-4 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <Box className="flex items-center">
          {/* User avatar */}
          <Box className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 text-xl font-bold">
            {userData.name.charAt(0)}
          </Box>
          {/* User details */}
          <Box className="ml-4">
            <Text className="text-xl font-bold">{greeting}, {userData.name}!</Text>
            <Text className="text-sm text-gray-500">
              Th√†nh vi√™n t·ª´ {userData.joinDate}
            </Text>
          </Box>
        </Box>
        
        {/* Logout button - improved styling */}
        <Button 
          onClick={handleLogout}
          className="px-4 py-2 text-sm rounded-lg flex items-center gap-2"
          variant="secondary"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path fillRule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
            <path fillRule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
          </svg>
          ƒêƒÉng xu·∫•t
        </Button>
      </Box>

      {/* Dashboard stats */}
      <Box className="p-4">
        <Box className="bg-blue-50 rounded-xl p-4 mb-4">
          <Text className="text-sm text-gray-500 mb-1">B√†i thi ƒë√£ ƒëƒÉng k√Ω</Text>
          <Box className="flex items-center">
            <Text className="text-2xl font-bold mr-2">{userData.registeredExams}</Text>
            <Box className="text-blue-600 text-xl">üìÑ</Box>
          </Box>
        </Box>

        {/* Quick actions */}
        <Text className="font-bold text-lg mb-3">Thao t√°c nhanh</Text>
        <Box className="grid grid-cols-3 gap-3">
          <Box 
            className="bg-white rounded-xl p-3 shadow-sm flex flex-col items-center justify-center"
            onClick={() => setShowSearchModal(true)}
          >
            <Box className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mb-2">
              <Box className="text-blue-600 text-xl">üîç</Box>
            </Box>
            <Text className="text-xs text-center">T√¨m b√†i thi</Text>
          </Box>
          <Box className="bg-white rounded-xl p-3 shadow-sm flex flex-col items-center justify-center">
            <Box className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mb-2">
              <Box className="text-green-600 text-xl">üìÖ</Box>
            </Box>
            <Text className="text-xs text-center">L·ªãch thi</Text>
          </Box>
          <Box className="bg-white rounded-xl p-3 shadow-sm flex flex-col items-center justify-center">
            <Box className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center mb-2">
              <Box className="text-purple-600 text-xl">‚≠ê</Box>
            </Box>
            <Text className="text-xs text-center">K·∫øt qu·∫£</Text>
          </Box>
        </Box>
      </Box>

      {/* Recent exams */}
      <Box className="p-4">
        <Text className="font-bold text-lg mb-3">B√†i thi g·∫ßn ƒë√¢y</Text>
        
        {isLoading && (
          <Box className="flex justify-center items-center py-8">
            <Spinner />
          </Box>
        )}
        
        {error && (
          <Box className="bg-red-50 text-red-600 p-4 rounded-lg mb-3">
            {error}
          </Box>
        )}
        
        {!isLoading && !error && exams.length === 0 && (
          <Box className="bg-gray-50 p-4 rounded-lg text-center">
            <Text className="text-gray-500">Ch∆∞a c√≥ b√†i thi n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω</Text>
          </Box>
        )}
        
        {!isLoading && exams.map((exam) => (
          <Box key={exam.id} className="bg-white rounded-xl p-4 shadow-sm mb-3">
            <Box className="flex justify-between items-center mb-2">
              <Text className="font-medium">{exam.title}</Text>
              <Text className="text-xs text-blue-600 font-medium">{formatExamDate(exam.exam_date)}</Text>
            </Box>
            <Text className="text-sm text-gray-500 mb-2">
              {exam.description}
            </Text>
            <Text className="text-sm text-gray-500 mb-2">Th·ªùi gian: {exam.duration} ph√∫t</Text>
            <Box className="flex justify-between">
              <Text 
                className={`text-xs px-2 py-1 rounded-full ${exam.status === 'completed' 
                  ? 'bg-green-100 text-green-600' 
                  : 'bg-blue-100 text-blue-600'}`}
              >
                {exam.status === 'registered' ? 'ƒê√£ ƒëƒÉng k√Ω' : 
                 exam.status === 'completed' ? 'ƒê√£ ho√†n th√†nh' : 'S·∫Øp di·ªÖn ra'}
              </Text>
              <Button size="small" variant="primary">Xem chi ti·∫øt</Button>
            </Box>
            {exam.score !== undefined && (
              <Box className="mt-2 pt-2 border-t border-gray-100">
                <Text className="text-sm font-medium">ƒêi·ªÉm s·ªë: <Text className="text-blue-600">{exam.score}/10</Text></Text>
              </Box>
            )}
          </Box>
        ))}
      </Box>

      <Logo className="mx-auto my-4" />
      
      {/* Modal t√¨m ki·∫øm b√†i thi */}
      {/* S·ª≠ d·ª•ng Sheet thay v√¨ Modal ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ ch·ªìng l·∫•p */}
      <Sheet
        visible={showSearchModal}
        onClose={() => setShowSearchModal(false)}
        autoHeight
        mask
        handler
        swipeToClose
      >
        <Box className="p-4 space-y-6">
          {/* Ti√™u ƒë·ªÅ */}
          <Box className="flex justify-between items-center mb-4">
            <Text className="text-lg font-bold">T√¨m ki·∫øm b√†i thi</Text>
            <Button 
              size="small" 
              onClick={() => setShowSearchModal(false)}
              className="p-1"
            >
              ‚úï
            </Button>
          </Box>
          
          {/* C√°c tr∆∞·ªùng t√¨m ki·∫øm */}
          <Box className="space-y-2 mb-6">
            <Text className="text-sm font-medium">M√¥n thi</Text>
            <Select
              placeholder="Ch·ªçn m√¥n thi"
              value={searchFilters.subject}
              onChange={(value) => setSearchFilters(prev => ({
                ...prev,
                subject: value as string,
                examType: "",
                examName: ""
              }))}
              className="w-full"
              style={{ zIndex: 1300 }} /* TƒÉng z-index cho select */
            >
              {subjects.map((subject) => (
                <Select.Option key={subject} value={subject}>
                  {subject}
                </Select.Option>
              ))}
            </Select>
          </Box>
          
          <Box className="space-y-2 mb-8">
            <Text className="text-sm font-medium">Lo·∫°i k√¨ thi</Text>
            <Select
              placeholder="Ch·ªçn lo·∫°i k√¨ thi"
              value={searchFilters.examType}
              onChange={(value) => setSearchFilters(prev => ({
                ...prev,
                examType: value as string,
                examName: ""
              }))}
              disabled={!searchFilters.subject}
              className="w-full"
              style={{ zIndex: 1200 }} /* Z-index th·∫•p h∆°n select ƒë·∫ßu ti√™n */
            >
              {examTypes.map((type) => (
                <Select.Option key={type} value={type}>
                  {type}
                </Select.Option>
              ))}
            </Select>
          </Box>
          
          <Box className="space-y-2 mb-8">
            <Text className="text-sm font-medium">K√¨ thi</Text>
            <Select
              placeholder="Ch·ªçn k√¨ thi"
              value={searchFilters.examName}
              onChange={(value) => setSearchFilters(prev => ({ ...prev, examName: value as string }))}
              disabled={!searchFilters.subject || !searchFilters.examType}
              className="w-full"
              style={{ zIndex: 1100 }} /* Z-index th·∫•p nh·∫•t */
            >
              {searchFilters.subject && searchFilters.examType && examNames[searchFilters.subject]?.[searchFilters.examType]?.map((name) => (
                <Select.Option key={name} value={name}>
                  {name}
                </Select.Option>
              ))}
            </Select>
          </Box>
          
          <Box className="pt-4">
            <Text className="text-xs text-gray-500">
              Ch·ªçn c√°c b·ªô l·ªçc ƒë·ªÉ t√¨m ki·∫øm b√†i thi ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n.
            </Text>
          </Box>
          
          {/* N√∫t t√¨m ki·∫øm */}
          <Box className="mt-6">
            <Button 
              fullWidth 
              onClick={() => {
                console.log("T√¨m ki·∫øm v·ªõi b·ªô l·ªçc:", searchFilters);
                // Th·ª±c hi·ªán t√¨m ki·∫øm ·ªü ƒë√¢y
                setShowSearchModal(false);
              }}
            >
              T√¨m ki·∫øm
            </Button>
          </Box>
        </Box>
      </Sheet>
    </Page>
  );
}

export default HomePage;
